name: TestPyPI
on:
  issue_comment:
    types: [created]

jobs:
  dispatch:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '[testpypi]') && (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'COLLABORATOR')
    steps:
      # If the request is invalid (comment on issue or closed PR), a comment is added
      # indicating the [testpypi] request was rejected.
      #
      # Sets two output variables accessible by `steps.pr_check.<var>`:
      #   - is_valid: true if comment on open pull request, false otherwise.
      #   - header: prefix to include in comment responses (denotes what triggered).
      - name: Validate [testpypi] Request
        id: pr_check
        uses: actions/github-script@0.8.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Comment events can occur for both issues and pull requests.  Determine if
            // the comment was added on an open pull request.
            const is_pr = "${{ github.event.issue.html_url }}".startsWith(
              "https://github.com/" + "${{ github.repository }}" + "/pull");
            const is_closed = "${{ github.event.issue.state }}" == "closed";
            const is_valid = is_pr && !is_closed;
            console.log("::set-output name=is_valid::" + is_valid);
            
            // Create a common comment response header.  </blockquote> is a hack to
            // circumvent that the API does not support newlines in the body, as well
            // set-output breaks on newlines too.
            const header = "> @${{ github.event.comment.user.login }} _triggered in_ " +
              "${{ github.event.comment.html_url }} </blockquote>";
            console.log("::set-output name=header::" + header);
            
            if (!is_valid) {
              const comment = ":no_entry_sign: `[testpypi]` only applies to open " +
                "pull requests.";
              github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `${header} ${comment}`
              });
              github.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: ${{ github.event.comment.id }},
                content: "confused"
              });
            }
      - name: Setup Python
        if: steps.pr_check.outputs.is_valid == 'true'
        uses: actions/setup-python@v1
        with:
          python-version: 3.x
      # Modify the __version__ in __init__.py to be able to upload to TestPyPI, set this
      # as an output accessible via `steps.dist.outputs.dev_version`.
      - name: Prepare and Upload Distribution
        if: steps.pr_check.outputs.is_valid == 'true'
        id: dist
        run: |
          set -exo

          # Clone and checkout the pull request.
          git clone ${{ github.event.repository.clone_url }}
          cd "${{ github.event.repository.name }}"
          git fetch origin pull/${{ github.event.issue.number }}/head:the-pr
          git checkout the-pr

          # Install the build utilities.
          pip install -U pip setuptools wheel
          pip install tox twine

          # [tmp]
          git clone https://github.com/ryan-roemer/sphinx-bootstrap-theme.git
          cd sphinx-bootstrap-theme
          git checkout feat/modern-ci-py-tooling
          # [/tmp]
          # Compute a dev version using an increasing numbering scheme since a given
          # version number can only ever be uploaded once.
          dev_version="$(python -c 'import time; \
            from sphinx_bootstrap_theme import __version__; \
            dev = "dev" + str(int(time.time())); \
            major, minor, patch = __version__.split(".")[0:3]; \
            v = ".".join([major, minor, patch, dev]); \
            print(v)')"
          echo "::set-output name=dev_version::$dev_version"

          # Replace the __version__ in __init__.py.  Verify there was a change.
          sed 's/^\(__version__\).*$/\1 = "'"$dev_version"'"/' \
            sphinx_bootstrap_theme/__init__.py > tmp
          mv tmp sphinx_bootstrap_theme/__init__.py
          
          # Display the changes, report error if no changes found.
          git diff --color=always > the_diff
          if [ ! -s the_diff ]; then
            echo 'No git diff found, but a diff was expected!' >&2
            exit 1
          fi
          cat the_diff

          # Build the distribution.
          tox -e dist

          # Upload to TestPyPI!
          # NOTE: trailing slash after legacy/ _required_!
          twine upload \
            --username "__token__" \
            --password "${{ secrets.test_pypi_password }}" \
            --repository-url "https://test.pypi.org/legacy/" \
            dist/*
      - name: Report Packaged Version
        if: steps.pr_check.outputs.is_valid == 'true'
        uses: actions/github-script@0.8.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const header = "${{ steps.pr_check.outputs.header }}";
            const version = "${{ steps.dist.outputs.dev_version }}";
            const url = `https://test.pypi.org/project/sphinx-bootstrap-theme/${version}/`;
            const comment = `:heavy_check_mark: [Deployed to TestPyPI](${url})!  ` +
              "Install using `pip install -i https://test.pypi.org/simple/ " +
              `sphinx-bootstrap-theme==${version}\`.`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${header} ${comment}`
            });
            github.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ github.event.comment.id }},
              content: 'rocket'
            })
      - name: Report Errors
        if: failure()
        uses: actions/github-script@0.8.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const header = "${{ steps.pr_check.outputs.header }}";
            const run_url = "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}";
            const comment = ":interrobang: Something went wrong doing `[testpypi]`, " +
              `please [check the log](${run_url}).`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${header} ${comment}`
            });
            github.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ github.event.comment.id }},
              content: 'confused'
            });
