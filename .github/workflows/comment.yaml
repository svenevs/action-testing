name: TestPyPI
on:
  issue_comment:
    types: [created]

jobs:
  dispatch:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '[testpypi]')
    steps:
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.x
      - name: Dump GitHub Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Do Robotics
        run: |
          set -exo

          # add_comment "some comment data in $1"
          function add_comment() {
            curl -X POST \
                 --url '${{ github.event.issue.comments_url }}' \
                 -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
                 -H 'Content-Type: application/json' \
                 -d "{\"body\": \"$1\"}"
          }

          # add_reaction "reaction_type"
          #
          # reaction_type can be:
          #   "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
          function add_reaction() {
            curl -X POST \
                 --url 'https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions' \
                 -H 'Accept: application/vnd.github.squirrel-girl-preview' \
                 -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
                 -H 'Content-Type: application/json' \
                 -d "{\"content\": \"$1\"}"
          }

          # In event of failure, try and notify users.
          function failure() {
              add_comment ":interrobang: Something went wrong doing `[testpypi]`, please [check the log](https://github.com/${{ github.repository }}/runs/${{ github.run_id }})."
              exit 1
          }
          trap "failure" ERR

          association="${{ github.event.comment.author_association }}"
          html_url="${{ github.event.issue.html_url }}"
          pr_url="https://github.com/${{ github.repository }}/pull"
          is_pr="$(python -c "print('$html_url'.startswith('$pr_url'))")"

          if [[ "$association" = "OWNER" ]] || [[ "$association" == "COLLABORATOR" ]]; then
            if [[ "$is_pr" == "True" ]]; then
              if [[ "${{ github.event.issue.state }}" == "closed" ]]; then
                # Add a comment to the issue indicating [testpypi] only triggers
                # for open pull requests.
                add_comment ':scream: `[testpypi]` only runs on **open** pull requests!'
                add_reaction "confused"
              else
                # Clone and checkout the pull request.
                git clone ${{ github.event.repository.clone_url }}
                cd "${{ github.event.repository.name }}"
                git fetch origin pull/${{ github.event.issue.number }}/head:the-pr
                git checkout the-pr

                # Install the build utilities.
                pip install -U pip setuptools wheel
                pip install tox twine
                export SPHINX_BOOTSTRAP_THEME_DEV_VERSION="$(date +%s)"

                # Package and upload.
                tox -e dist
                twine upload --repository-url https://test.pypi.org/legacy/ \
                             --username "__token__" \
                             --password "${{ secrets.TEST_PYPI_PASSWORD }}" \
                             dist/*
                add_comment "devno: $SPHINX_BOOTSTRAP_THEME_DEV_VERSION"
                add_reaction "rocket"
              fi
            else
              add_comment ':no_entry_sign: `[testpypi]` only applies to open pull requests.'
              add_reaction "confused"
            fi
          else
            add_comment ':no_entry_sign: `[testpypi]` for owner / collaborators, please ask one of them for help!'
            add_reaction "confused"
          fi
